#!/bin/bash
cd "$(dirname "$0")"

#################################################
# Config
#################################################
. ./config/database_config.bash

#################################################
# Libs
#################################################
. ./lib/logger.bash
. ./lib/mysql.bash

#################################################
# Creates a new migration
#
# @param $1: The name of the migration
#################################################
migrate_make() {
    if [[ -z "$1" ]]; then
        log_error "migrate:make requires a second parameter for the name of the migration."
    else
        epoch_time=$(date +%s)
        migration_name="$epoch_time"_"$1"
        
        migrate=./migrations/migrate/"$migration_name"_migrate.sql
        revert=./migrations/revert/"$migration_name"_revert.sql

        # Creating migration files
        touch "$migrate"
        log_success "Migrate file located at $migrate"
        touch "$revert" 
        log_success "Revert file located at $revert"

        # Creating migration in the database
        create_migration $migration_name
    fi
}

#################################################
# Rollback the last migration operation
#################################################
migrate_rollback() {
    echo "TODO Rollback The Last Migration Operation"
}

#################################################
# Rollback all migrations
#################################################
migrate_reset() {
    echo "TODO Rollback all migrations"
}

#################################################
# Rollback all migrations and run them all again
#################################################
migrate_refresh() {
    echo "TODO Rollback all migrations and run them all again"
}

#################################################
# Runs all outstanding migrations
#################################################
migrate() {
    migrations=$(get_outstanding_migrations)

    # TODO if there are migrations, set all ran_last to false

    for column in $migrations
    do
        # id column
        if [ "$id" == "" ]; then
            id=$column
            continue
        fi

        # name column
        if [ "$name" == "" ]; then
           name=$column 
        fi

        # Handling
        handle_single_migration $id $name

        # Clearing 
        id=""
        name=""
    done
}


#################################################
# Runs a single migration
#
# @param $1: The id of the migration
# @param $2: The name of the migration
#################################################
handle_single_migration() {
    # Migrating the file
    migration_file=./migrations/migrate/"$name"_migrate.sql
    database_file_execute $migration_file

    # TODO log that we ran this migration

    # TODO update the database as active + last migration
}

#################################################
# Determines which action to take
#
# @param $1: The action to take
# @param $2: Parameters to pass to the action
#################################################
determine_action() {
    if   [ "$1" = "migrate:make" ]; then
        migrate_make $2
    elif [ "$1" = "migrate:rollback" ]; then
        migrate_rollback
    elif [ "$1" = "migrate:reset" ]; then
        migrate_reset
    elif [ "$1" = "migrate:refresh" ]; then
        migrate_refresh
    elif [ "$1" = "migrate" ]; then
        migrate
    else
        log_error "Action invalid"
    fi
}


#################################################
# Ensures that the database is set up
#################################################
ensure_setup() {
    exists=$(database_table_exists)

    # Table doesn't exist, create it
    if [ $exists -eq 0 ]; then
        # Creating Table
        create_migrations_table

        # Logging
        log_alert "Created table $MYSQL_MIGRATION_TABLE"
    fi
}

#################################################
# Start
#################################################
ensure_setup
determine_action "$@"

